#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May 30 17:26:10 2025

@author: andrefelix
"""


import pandas as pd


def explode_partplanprev_and_allocate(portfolios):
    """
    Decomposes aggregated allocations of type 'partplanprev' into proportional
    entries based on real underlying assets in the 'portfolios' dataset.

    This function is specific to portfolios that contain entries of type
    'partplanprev', which represent consolidated participation (e.g., of
    beneficiaries or plans). For each aggregated record, it generates new
    rows representing proportional allocations across the actual portfolio
    assets, using the 'percpart' percentage.

    Parameters
    ----------
    portfolios : pandas.DataFrame
        Must include ['percpart', 'valor_calc', 'codcart', 'nome', 'cnpb', 'dtposicao', 'tipo'].

    Returns
    -------
    pandas.DataFrame
        A DataFrame containing the newly generated rows, each representing a
        proportional allocation from a 'partplanprev' entry. Includes:
        - 'valor_calc': calculated based on the original percentage.
        - 'flag_rateio': a flag set to 0, indicating generated allocation rows.

    Raises
    ------
    ValueError
        If any required columns are missing from the input DataFrame.

    Notes
    -----
    - The function performs an inner join between 'partplanprev' entries and
      the actual underlying assets of the portfolio to compute proportional values.
    - This process effectively expands the data structure by creating new rows.
    """
    if portfolios[portfolios['tipo'] == 'partplanprev'].empty:
        return None

    partplanprev = portfolios[portfolios['tipo'] == 'partplanprev'][
        ['codcart', 'nome', 'percpart', 'cnpb', 'dtposicao']
    ]

    assets_to_allocate = portfolios[
        ~portfolios['tipo'].isin(['partplanprev'])
    ].drop(columns=['cnpb', 'percpart'])

    assets_to_allocate = assets_to_allocate.copy()
    assets_to_allocate['original_index'] = assets_to_allocate.index

    allocated_assets = partplanprev.merge(
        assets_to_allocate.dropna(subset=['valor_calc']),
        on=['codcart', 'nome', 'dtposicao'],
        how='inner'
    )

    allocated_assets['percpart'] = pd.to_numeric(allocated_assets['percpart'], errors='raise')
    allocated_assets['valor_calc'] = pd.to_numeric(allocated_assets['valor_calc'], errors='raise')

    allocated_assets['valor_calc'] = (
        allocated_assets['percpart'] * allocated_assets['valor_calc'] / 100.0
    )

    mask_cotas = allocated_assets['tipo'] == 'cotas'

    allocated_assets.loc[mask_cotas, 'qtdisponivel'] = (
        allocated_assets.loc[mask_cotas, 'percpart'] *
        allocated_assets.loc[mask_cotas, 'qtdisponivel'] / 100.0
    )

    allocated_assets['flag_rateio'] = 0

    return allocated_assets


def integrate_allocated_partplanprev(entity, allocated_partplanprev):
    """
    Integrates allocated partplanprev rows into the original 'carteiras' DataFrame.

    This includes:
    - Flagging original rows that were used in the allocation.
    - Appending the newly allocated rows.
    - Zeroing out 'valor_calc' for original rows that were split.

    Args:
        entity (pd.DataFrame): Original carteiras DataFrame.
        allocated_partplanprev (pd.DataFrame): Rows generated by
        explode_partplanprev_and_allocate().

    Returns:
        pd.DataFrame: The updated DataFrame with new rows and adjusted flags/values.
    """
    entity['flag_rateio'] = entity.index.isin(
        allocated_partplanprev['original_index'].unique()
    ).astype(int)

    entity = pd.concat([entity, allocated_partplanprev], ignore_index=True)
    entity['valor_calc'] = entity['valor_calc'].where(entity['flag_rateio'] != 1, 0)

    return entity
